d3.select("p").style("color", "green");
d3.select("p").append("h1").text("Hello from D3!");

window.addEventListener("message", (event) => {
  data = event.data; // The JSON data our extension sent
  console.log("Received data:", data);

  let PATH_SEPARATOR = "/";
  var childrenList = [];

  function updateChildren() {
    childrenList.splice(0, childrenList.length);
    let rootChildren = rootCpy.children;
    for (childData of rootChildren) {
      if (!childData.data.filename) {
        childrenList.push(childData.data.path);
      }
    }
    autocomplete(document.getElementById("searchBox"), childrenList);
  }

  var searchBox = d3.select(".searchBox");
  function traverseData(path) {
    rootCpy = root;
    let pSplit = path.split(PATH_SEPARATOR);
    for (let i = 0; i < pSplit.length; i++) {
      let pathFound = false;

      if (rootCpy.children) {
        let dirChildrenLen = rootCpy.children.length;
        pathFound = false;
        for (let j = 0; j < dirChildrenLen; j++) {
          if (rootCpy.children[j].data.path === pSplit[i]) {
            rootCpy = rootCpy.children[j];
            pathFound = true;
            break;
          }
        }
        updateChildren();
        if (!pathFound) {
          break;
        }
      }
    }
    zoom(rootCpy);
  }
  searchBox.on("keypress", function (d) {
    var text = d.srcElement.value;
    traverseData(text);
  });

  var color = d3
    .scaleLinear()
    .domain([1, 10])
    .range(["#4444aa", "#ff0000"])
    .interpolate(d3.interpolateHcl);

  // var body = d3.select("body").style("background-color", color(-1));

  var svg = d3.select("svg"),
    margin = 20,
    diameter = +svg.attr("width"),
    g = svg
      .append("g")
      .attr(
        "transform",
        "translate(" + diameter / 2 + "," + diameter / 2 + ")"
      );

  // svg.style("background", color(-1));

  var pack = d3
    .pack()
    .size([diameter - margin, diameter - margin])
    .padding(2);

  var root = d3
    .hierarchy(data, (c) => {
      return c.fileTreeNodeList;
    })
    .sum(function (d) {
      return d.value ? d.value : 500;
    })
    .sort(function (a, b) {
      return b.value - a.value;
    });

  var rootCpy = root;
  var focus = root,
    nodes = pack(root).descendants(),
    view;
  function colorCircle(d) {
    if (d.children) {
      return color(d.depth);
    }
    let heatVal = d.data.latestHeatObject.overallHeat;
    let colorVal = color((255 * heatVal) / 5, 0, (255 * (5 - heatVal)) / 5);
    return colorVal;
  }

  var circle = g
    .selectAll("circle")
    .data(nodes)
    .enter()
    .append("circle")
    .attr("class", function (d) {
      return d.parent
        ? d.children
          ? "node"
          : "node node--leaf"
        : "node node--root";
    })
    .style("fill", function (d) {
      if (d.children) {
        return "#777777";
      }
<<<<<<< HEAD
      // let latestCommit = d.data.latestCommitInTreeWalk;
      let heatVal = d.data.latestHeatObject.overallHeat;
      // let heatVal = d.data.commitHashToHeatObjectMap[latestCommit].overallHeat;
=======
      let heatVal = d.data.latestHeatObject.overallHeat;
      console.log(heatVal);
>>>>>>> develop
      return color(heatVal);
    })
    .on("click", function (event, d) {
      if (focus !== d) {
        zoom(d);
        event.stopPropagation();
      } else {
        zoom(root);
        event.stopPropagation();
      }
    })
    .on("mouseover", function (d) {
    });

  var text = g
    .selectAll("text")
    .data(nodes)
    .enter()
    .append("text")
    .attr("class", "label")
    .style("fill-opacity", function (d) {
      return d.parent === root ? 1 : 0;
    })
    .style("display", function (d) {
      return d.parent === root ? "inline" : "none";
    })
    .text(function (d) {
      return d.children ? d.data.path : d.data.filename;
    });

  var node = g.selectAll("circle,text");

  zoomTo([root.x, root.y, root.r * 2 + margin]);

  function zoom(d) {
    focus = d;

    var transition = d3
      .transition()
      .duration(d.altKey ? 7500 : 750)
      .tween("zoom", function (d) {
        var i = d3.interpolate(view, [focus.x, focus.y, focus.r * 2 + margin]);
        return function (t) {
          zoomTo(i(t));
        };
      });

    transition
      .selectAll("text")
      .filter(function (d) {
<<<<<<< HEAD
        if (d && d.parent) {
          return d.parent === focus || this.style.display === "inline";
        }
      })
      .style("fill-opacity", function (d) {
        if (d && d.parent) {
=======
        if(d && d.parent) {
          console.log("This is getting hit",d);
        return d.parent === focus || this.style.display === "inline";
        }
      })
      .style("fill-opacity", function (d) {
        if(d && d.parent) {
>>>>>>> develop
          return d.parent === focus ? 1 : 0;
        }
      })
      .on("start", function (d) {
        if (d && d.parent && d.parent === focus) {
          this.style.display = "inline";
        }
      })
      .on("end", function (d) {
        if (d && d.parent && d.parent !== focus) {
          this.style.display = "none";
        }
      });
  }

  function zoomTo(v) {
    var k = diameter / v[2];
    view = v;
    node.attr("transform", function (d) {
      return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")";
    });
    circle.attr("r", function (d) {
      return d.r * k;
    });
  }

  function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function (e) {
      var a,
        b,
        i,
        val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) {
        return false;
      }
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      var valCut = val.substr(
        val.lastIndexOf(PATH_SEPARATOR) === 0 ? 0 : val.lastIndexOf(PATH_SEPARATOR) + 1,
        val.length
      );
      for (i = 0; i < childrenList.length; i++) {
        //arr.length
        /*check if the item starts with the same letters as the text field value:*/
        if (
          childrenList[i].substr(0, valCut.length).toUpperCase() ===
          valCut.toUpperCase()
        ) {
          //arr[i]
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML =
            "<strong>" + arr[i].substr(0, valCut.length) + "</strong>";
          b.innerHTML += arr[i].substr(valCut.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML +=
            "<input type='hidden' value='" + childrenList[i] + "'>"; //arr[i]
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function (e) {
            /*insert the value for the autocomplete text field:*/
            inp.value =
              val.substr(0, val.lastIndexOf(PATH_SEPARATOR) + 1) +
              this.getElementsByTagName("input")[0].value;
            traverseData(inp.value);
            /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
            closeAllLists();
          });
          a.appendChild(b);
        }
      }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function (e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) {
        x = x.getElementsByTagName("div");
      }
      if (e.keyCode === 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode === 38) {
        //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode === 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) {
            x[currentFocus].click();
          }
        }
      }
    });
    function addActive(x) {
      /*a function to classify an item as "active":*/
      if (!x) {
        console.log("Could not make selected item more visible.");
        return false;
      }
      /*start by removing the "active" class on all items:*/
      removeActive(x);
      if (currentFocus >= x.length) {
        currentFocus = 0;
      }
      if (currentFocus < 0) {
        currentFocus = x.length - 1;
      }
      /*add class "autocomplete-active":*/
      x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
      /*a function to remove the "active" class from all autocomplete items:*/
      for (var i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
      }
    }
    function closeAllLists(elmnt) {
      /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
      var x = document.getElementsByClassName("autocomplete-items");
      for (var i = 0; i < x.length; i++) {
        if (elmnt !== x[i] && elmnt !== inp) {
          x[i].parentNode.removeChild(x[i]);
        }
      }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
      closeAllLists(e.target);
    });
  }
});
